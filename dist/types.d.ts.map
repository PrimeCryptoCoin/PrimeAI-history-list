{"mappings":"AAAA,2BAA2B,MAAM,EAAE,MAAM,EAAE,GAAG,YAAY,EAAE,CAiB3D;AA6FD;IACE,SAAS,EAAE,MAAM,CAAC;IAClB,QAAQ,EAAE,MAAM,CAAC;IACjB,IAAI,EAAE,MAAM,CAAC;IACb,KAAK,EAAE,MAAM,CAAC;IACd,UAAU,EAAE,MAAM,CAAC;IACnB,MAAM,EAAE,MAAM,CAAC;IACf,OAAO,EAAE,MAAM,CAAC;CACjB;AAED;IACE,SAAS,EAAE,MAAM,CAAC;IAClB,KAAK,EAAE,MAAM,CAAC;IACd,QAAQ,EAAE,MAAM,CAAC;CAClB;AACD;IACE,MAAM,EAAE,OAAO,CAAC;IAChB,MAAM,EAAE,gBAAgB,EAAE,CAAC;IAC3B,WAAW,EAAE,MAAM,CAAC;IACpB,aAAa,EAAE,MAAM,CAAC;IACtB,GAAG,EAAE,MAAM,CAAC;CACb;;;;AACD,wBAEE","sources":["index.ts"],"sourcesContent":["export function getHistory(deltas: IDelta[]): IHistoryItem[] {\r\n  const deltasByTransactionId = getDeltasMappedToTransactionId(deltas);\r\n  const history = Array.from(deltasByTransactionId.values()).map(getListItem);\r\n  history.sort((h1, h2) => {\r\n    //Sort on blockheight AND transaction, you can send multiple transaction in the same block\r\n    const value1 = h1.blockHeight + \"_\" + h1.transactionId;\r\n    const value2 = h2.blockHeight + \"_\" + h2.transactionId;\r\n\r\n    if (value1 > value2) {\r\n      return -1;\r\n    }\r\n    if (value2 < value1) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  });\r\n  return history;\r\n}\r\n\r\n/**\r\n *\r\n * @param deltas Address deltas from the same transaction\r\n */\r\nfunction getListItem(deltas: IDelta[]): IHistoryItem {\r\n  //Very simple if only one delta, like you received two LEMONADE tokens\r\n  if (deltas.length === 1) {\r\n    const delta = deltas[0];\r\n    const item: IHistoryItem = {\r\n      isSent: delta.satoshis < 0,\r\n      fee: 0,\r\n      assets: [\r\n        {\r\n          assetName: delta.assetName,\r\n\r\n          satoshis: delta.satoshis,\r\n          value: delta.satoshis / 1e8,\r\n        },\r\n      ],\r\n      blockHeight: delta.height,\r\n      transactionId: delta.txid,\r\n    };\r\n    return item;\r\n  } else {\r\n    const balanceByAsset = {};\r\n    deltas.map((delta) => {\r\n      balanceByAsset[delta.assetName] = balanceByAsset[delta.assetName] || 0;\r\n      balanceByAsset[delta.assetName] += delta.satoshis;\r\n    });\r\n\r\n    const fee = getPrimeaiTransactionFee(deltas);\r\n    if (fee > 0) {\r\n      balanceByAsset[\"PrimeAI\"] -= fee;\r\n    }\r\n    let isSent = false;\r\n\r\n    let assets: INeedABetterName[] = Object.keys(balanceByAsset).map((name) => {\r\n      //If any of the values are negative, it means we have sent\r\n      if (balanceByAsset[name] < 0) {\r\n        isSent = true;\r\n      }\r\n\r\n      const obj = {\r\n        assetName: name,\r\n        satoshis: balanceByAsset[name],\r\n        value: balanceByAsset[name] / 1e8,\r\n      };\r\n\r\n      return obj;\r\n    });\r\n\r\n    //Did we transfer asset (not PrimeAI)\r\n    const containsAssets = !!assets.find((asset) => asset.assetName !== \"PrimeAI\");\r\n\r\n    const hasSentAssets = isSent && containsAssets === true;\r\n\r\n    //OK we have transfered assets\r\n    //If we find PrimeAI transferes less than 5 PrimeAI, assume it is the miners fee\r\n    //Sure, technically you can send 4 PrimeAI and 1 LEMONADE in the same transaction but that is exceptional\r\n\r\n    //@ts-ignore\r\n    if (hasSentAssets === true) {\r\n      assets = assets.filter((asset) => {\r\n        if (asset.assetName === \"PrimeAI\" && asset.value < 5) {\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n    }\r\n    const listItem: IHistoryItem = {\r\n      assets,\r\n      blockHeight: deltas[0].height,\r\n      transactionId: deltas[0].txid,\r\n      isSent,\r\n      fee: fee,\r\n    };\r\n    return listItem;\r\n  }\r\n}\r\nfunction getDeltasMappedToTransactionId(deltas: IDelta[]) {\r\n  if (!deltas) {\r\n    throw Error(\"Argument deltas is mandatory and cannot be nullish\");\r\n  }\r\n  const map: Map<string, IDelta[]> = new Map();\r\n  deltas.map((delta) => {\r\n    const arr: IDelta[] = map.get(delta.txid) || [];\r\n    arr.push(delta);\r\n    map.set(delta.txid, arr);\r\n  });\r\n  return map;\r\n}\r\nexport interface IDelta {\r\n  assetName: string;\r\n  satoshis: number;\r\n  txid: string;\r\n  index: number;\r\n  blockindex: number;\r\n  height: number;\r\n  address: string;\r\n}\r\n\r\ninterface INeedABetterName {\r\n  assetName: string;\r\n  value: number;\r\n  satoshis: number;\r\n}\r\nexport interface IHistoryItem {\r\n  isSent: boolean;\r\n  assets: INeedABetterName[];\r\n  blockHeight: number;\r\n  transactionId: string;\r\n  fee: number;\r\n}\r\nexport default {\r\n  getHistory,\r\n};\r\n\r\nfunction getPrimeaiTransactionFee(deltas: IDelta[]): number {\r\n  //Check all inputed PrimeAI and match with outputted PrimeAI\r\n  //The diff is the tansaction fee.\r\n\r\n  //this only applies to SENT transactions\r\n\r\n  let inputted = 0;\r\n  let outputted = 0;\r\n\r\n  //It is sent if we have a PrimeAI transfer that is negative\r\n  const isSent = !!deltas.find(\r\n    (delta) => delta.assetName === \"PrimeAI\" && delta.satoshis < 0\r\n  );\r\n\r\n  if (isSent === false) {\r\n    return 0;\r\n  }\r\n\r\n  for (let delta of deltas) {\r\n    if (delta.assetName === \"PrimeAI\") {\r\n      if (delta.satoshis > 0) {\r\n        inputted = inputted + delta.satoshis;\r\n      } else if (delta.satoshis < 0) {\r\n        outputted = outputted + delta.satoshis;\r\n      }\r\n    }\r\n  }\r\n  const fee = inputted - outputted;\r\n  return fee;\r\n}\r\n"],"names":[],"version":3,"file":"types.d.ts.map"}