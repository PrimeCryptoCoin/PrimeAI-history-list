{"mappings":"AAAO,SAAS,0CAAW,MAAgB,EAAkB;IAC3D,MAAM,wBAAwB,qDAA+B;IAC7D,MAAM,UAAU,MAAM,IAAI,CAAC,sBAAsB,MAAM,IAAI,GAAG,CAAC;IAC/D,QAAQ,IAAI,CAAC,CAAC,IAAI,KAAO;QACvB,0FAA0F;QAC1F,MAAM,SAAS,GAAG,WAAW,GAAG,MAAM,GAAG,aAAa;QACtD,MAAM,SAAS,GAAG,WAAW,GAAG,MAAM,GAAG,aAAa;QAEtD,IAAI,SAAS,QACX,OAAO;QAET,IAAI,SAAS,QACX,OAAO;QAET,OAAO;IACT;IACA,OAAO;AACT;AAEA;;;CAGC,GACD,SAAS,kCAAY,MAAgB,EAAgB;IACnD,sEAAsE;IACtE,IAAI,OAAO,MAAM,KAAK,GAAG;QACvB,MAAM,QAAQ,MAAM,CAAC,EAAE;QACvB,MAAM,OAAqB;YACzB,QAAQ,MAAM,QAAQ,GAAG;YACzB,KAAK;YACL,QAAQ;gBACN;oBACE,WAAW,MAAM,SAAS;oBAC1B,UAAU,MAAM,QAAQ;oBACxB,OAAO,MAAM,QAAQ,GAAG;gBAC1B;aACD;YACD,aAAa,MAAM,MAAM;YACzB,eAAe,MAAM,IAAI;QAC3B;QACA,OAAO;IACT,OAAO;QACL,MAAM,iBAAiB,CAAC;QACxB,OAAO,GAAG,CAAC,CAAC,QAAU;YACpB,cAAc,CAAC,MAAM,SAAS,CAAC,GAAG,cAAc,CAAC,MAAM,SAAS,CAAC,IAAI;YACrE,cAAc,CAAC,MAAM,SAAS,CAAC,IAAI,MAAM,QAAQ;QACnD;QAEA,MAAM,MAAM,iDAA2B;QACvC,IAAI,MAAM,GACR,cAAc,CAAC,MAAM,IAAI;QAE3B,IAAI,SAAS,KAAK;QAElB,IAAI,SAA6B,OAAO,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC,OAAS;YACzE,0DAA0D;YAC1D,IAAI,cAAc,CAAC,KAAK,GAAG,GACzB,SAAS,IAAI;YAGf,MAAM,MAAM;gBACV,WAAW;gBACX,UAAU,cAAc,CAAC,KAAK;gBAC9B,OAAO,cAAc,CAAC,KAAK,GAAG;YAChC;YAEA,OAAO;QACT;QAEA,iCAAiC;QACjC,MAAM,iBAAiB,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,QAAU,MAAM,SAAS,KAAK;QAEpE,MAAM,gBAAgB,UAAU,mBAAmB,IAAI;QAEvD,8BAA8B;QAC9B,wEAAwE;QACxE,qGAAqG;QAErG,YAAY;QACZ,IAAI,kBAAkB,IAAI,EACxB,SAAS,OAAO,MAAM,CAAC,CAAC,QAAU;YAChC,IAAI,MAAM,SAAS,KAAK,SAAS,MAAM,KAAK,GAAG,GAC7C,OAAO,KAAK;YAEd,OAAO,IAAI;QACb;QAEF,MAAM,WAAyB;oBAC7B;YACA,aAAa,MAAM,CAAC,EAAE,CAAC,MAAM;YAC7B,eAAe,MAAM,CAAC,EAAE,CAAC,IAAI;oBAC7B;YACA,KAAK;QACP;QACA,OAAO;IACT,CAAC;AACH;AACA,SAAS,qDAA+B,MAAgB,EAAE;IACxD,IAAI,CAAC,QACH,MAAM,MAAM,sDAAsD;IAEpE,MAAM,MAA6B,IAAI;IACvC,OAAO,GAAG,CAAC,CAAC,QAAU;QACpB,MAAM,MAAgB,IAAI,GAAG,CAAC,MAAM,IAAI,KAAK,EAAE;QAC/C,IAAI,IAAI,CAAC;QACT,IAAI,GAAG,CAAC,MAAM,IAAI,EAAE;IACtB;IACA,OAAO;AACT;IAuBA,2CAAe;gBACb;AACF;AAEA,SAAS,iDAA2B,MAAgB,EAAU;IAC5D,iDAAiD;IACjD,iEAAiE;IACjE,OAAO;AACP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;aAgCW,GACb","sources":["index.ts"],"sourcesContent":["export function getHistory(deltas: IDelta[]): IHistoryItem[] {\r\n  const deltasByTransactionId = getDeltasMappedToTransactionId(deltas);\r\n  const history = Array.from(deltasByTransactionId.values()).map(getListItem);\r\n  history.sort((h1, h2) => {\r\n    //Sort on blockheight AND transaction, you can send multiple transaction in the same block\r\n    const value1 = h1.blockHeight + \"_\" + h1.transactionId;\r\n    const value2 = h2.blockHeight + \"_\" + h2.transactionId;\r\n\r\n    if (value1 > value2) {\r\n      return -1;\r\n    }\r\n    if (value2 < value1) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  });\r\n  return history;\r\n}\r\n\r\n/**\r\n *\r\n * @param deltas Address deltas from the same transaction\r\n */\r\nfunction getListItem(deltas: IDelta[]): IHistoryItem {\r\n  //Very simple if only one delta, like you received two LEMONADE tokens\r\n  if (deltas.length === 1) {\r\n    const delta = deltas[0];\r\n    const item: IHistoryItem = {\r\n      isSent: delta.satoshis < 0,\r\n      fee: 0,\r\n      assets: [\r\n        {\r\n          assetName: delta.assetName,\r\n          satoshis: delta.satoshis,\r\n          value: delta.satoshis / 1e8,\r\n        },\r\n      ],\r\n      blockHeight: delta.height,\r\n      transactionId: delta.txid,\r\n    };\r\n    return item;\r\n  } else {\r\n    const balanceByAsset = {};\r\n    deltas.map((delta) => {\r\n      balanceByAsset[delta.assetName] = balanceByAsset[delta.assetName] || 0;\r\n      balanceByAsset[delta.assetName] += delta.satoshis;\r\n    });\r\n\r\n    const fee = getPrimeaiTransactionFee(deltas);\r\n    if (fee > 0) {\r\n      balanceByAsset[\"PrimeAI\"] -= fee;\r\n    }\r\n    let isSent = false;\r\n\r\n    let assets: INeedABetterName[] = Object.keys(balanceByAsset).map((name) => {\r\n      //If any of the values are negative, it means we have sent\r\n      if (balanceByAsset[name] < 0) {\r\n        isSent = true;\r\n      }\r\n\r\n      const obj = {\r\n        assetName: name,\r\n        satoshis: balanceByAsset[name],\r\n        value: balanceByAsset[name] / 1e8,\r\n      };\r\n\r\n      return obj;\r\n    });\r\n\r\n    //Did we transfer asset (not PrimeAI)\r\n    const containsAssets = !!assets.find((asset) => asset.assetName !== \"PrimeAI\");\r\n\r\n    const hasSentAssets = isSent && containsAssets === true;\r\n\r\n    //OK we have transfered assets\r\n    //If we find PrimeAI transferes less than 5 PrimeAI, assume it is the miners fee\r\n    //Sure, technically you can send 4 PrimeAI and 1 LEMONADE in the same transaction but that is exceptional\r\n\r\n    //@ts-ignore\r\n    if (hasSentAssets === true) {\r\n      assets = assets.filter((asset) => {\r\n        if (asset.assetName === \"PrimeAI\" && asset.value < 5) {\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n    }\r\n    const listItem: IHistoryItem = {\r\n      assets,\r\n      blockHeight: deltas[0].height,\r\n      transactionId: deltas[0].txid,\r\n      isSent,\r\n      fee: fee,\r\n    };\r\n    return listItem;\r\n  }\r\n}\r\nfunction getDeltasMappedToTransactionId(deltas: IDelta[]) {\r\n  if (!deltas) {\r\n    throw Error(\"Argument deltas is mandatory and cannot be nullish\");\r\n  }\r\n  const map: Map<string, IDelta[]> = new Map();\r\n  deltas.map((delta) => {\r\n    const arr: IDelta[] = map.get(delta.txid) || [];\r\n    arr.push(delta);\r\n    map.set(delta.txid, arr);\r\n  });\r\n  return map;\r\n}\r\nexport interface IDelta {\r\n  assetName: string;\r\n  satoshis: number;\r\n  txid: string;\r\n  index: number;\r\n  blockindex: number;\r\n  height: number;\r\n  address: string;\r\n}\r\n\r\ninterface INeedABetterName {\r\n  assetName: string;\r\n  value: number;\r\n  satoshis: number;\r\n}\r\nexport interface IHistoryItem {\r\n  isSent: boolean;\r\n  assets: INeedABetterName[];\r\n  blockHeight: number;\r\n  transactionId: string;\r\n  fee: number;\r\n}\r\nexport default {\r\n  getHistory,\r\n};\r\n\r\nfunction getPrimeaiTransactionFee(deltas: IDelta[]): number {\r\n  //We currently do not support calculation of fee.\r\n  //Why? because we need to get the full transaction to get the fee\r\n  return 0;\r\n  /*\r\n  //Check all inputed PrimeAI and match with outputted PrimeAI\r\n  //The diff is the tansaction fee.\r\n\r\n  //this only applies to SENT transactions\r\n\r\n  let inputted = 0;\r\n  let outputted = 0;\r\n\r\n  //It is sent if we have a PrimeAI transfer that is negative\r\n  const isSent = !!deltas.find(\r\n    (delta) => delta.assetName === \"PrimeAI\" && delta.satoshis < 0\r\n  );\r\n\r\n  if (isSent === true) {\r\n    console.log(\"Think that \", deltas[0].txid, \"is sent\");\r\n  }\r\n  if (isSent === false) {\r\n    return 0;\r\n  }\r\n\r\n  for (let delta of deltas) {\r\n    if (delta.assetName === \"PrimeAI\") {\r\n      if (delta.satoshis < 0) {\r\n        inputted = inputted + delta.satoshis;\r\n      } else if (delta.satoshis > 0) {\r\n        outputted = outputted + delta.satoshis;\r\n      }\r\n    }\r\n  }\r\n\r\n  const fee = inputted - outputted;\r\n  return fee;*/\r\n}\r\n"],"names":[],"version":3,"file":"index.mjs.map"}